Passing value from Parent Comp. to child component using @Input() decorator
Executing custom event from Parent Comp., event created in child comp. using @Outpu() decorator / Event Emitter

                                                                                                                APP COMPONENT (Parent)
------------------------------------------------------------------------------------------------------------------------------------------
                                                                                                                    HTML
<div class="container">
  <app-cockpit
    (serverCreated)="onServerAdded($event)"
    (blueprintCreated)="onBlueprintAdded($event)"
  ></app-cockpit>
  <hr />
  <div class="row">
    <div class="col-xs-12">
      <app-server-element
        *ngFor="let serverElement of serverElements"
        [srvElement]="serverElement"
      ></app-server-element>
    </div>
  </div>
</div>

                                                                                                                      TS
import { Component } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  serverElements = [
    { type: 'server', name: 'Test Server', content: 'Just a server' }
  ];

  onServerAdded(serverData: { serverName: string; serverContent: string }) {
    this.serverElements.push({
      type: 'server',
      name: serverData.serverName,
      content: serverData.serverContent
    });
  }

  onBlueprintAdded(blueprintData: {
    serverName: string;
    serverContent: string;
  }) {
    this.serverElements.push({
      type: 'blueprint',
      name: blueprintData.serverName,
      content: blueprintData.serverContent
    });
  }
}
                                                                                                      cockpit component
====================================================================================================================================
                                                                                                                HTML
<div class="row">
  <div class="col-xs-12">
    <p>Add new Servers or blueprints!</p>
    <label>Server Name</label>
    <input type="text" class="form-control" [(ngModel)]="newServerName" />
    <label>Server Content</label>
    <input type="text" class="form-control" [(ngModel)]="newServerContent" />
    <br />
    <button class="btn btn-primary" (click)="onAddServer()">
      Add Server
    </button>
    <button class="btn btn-primary" (click)="onAddBlueprint()">
      Add Server Blueprint
    </button>
  </div>
</div>

                                                                                                                          TS

import { Component, OnInit, EventEmitter, Output } from '@angular/core';

@Component({
  selector: 'app-cockpit',
  templateUrl: './cockpit.component.html',
  styleUrls: ['./cockpit.component.css']
})
export class CockpitComponent implements OnInit {
  // two properties for event emitter
  // For custom event
  @Output() serverCreated = new EventEmitter<{
    serverName: string;
    serverContent: string;
  }>();

  @Output() blueprintCreated = new EventEmitter<{
    serverName: string;
    serverContent: string;
  }>();

  newServerName = '';
  newServerContent = '';

  constructor() {}

  ngOnInit() {}

  onAddServer() {
    this.serverCreated.emit({
      serverName: this.newServerName,
      serverContent: this.newServerContent
    });
  }

  onAddBlueprint() {
    this.blueprintCreated.emit({
      serverName: this.newServerName,
      serverContent: this.newServerContent
    });
  }
}
                                                                                                  server-elememt component
=====================================================================================================================================
                                                                                                                HTML
<div class="panel panel-default">
  <div class="panel-heading">{{ element.name }}</div>
  <div class="panel-body">
    <p>
      <strong *ngIf="element.type === 'server'" style="color: red">{{
        element.content
      }}</strong>
      <em *ngIf="element.type === 'blueprint'" style="color: blue">{{
        element.content
      }}</em>
    </p>
  </div>
</div>

                                                                                                                            TS
import { Component, OnInit, Input } from '@angular/core';

@Component({
  selector: 'app-server-element',
  templateUrl: './server-element.component.html',
  styleUrls: ['./server-element.component.css']
})
export class ServerElementComponent implements OnInit {
  // server type property
  // @Input decorator will expose this element object out of this component
  // after this we can access this object from other component also
  @Input('srvElement') element: { type: string; name: string; content: string };

  constructor() {}

  ngOnInit() {}
}
                                                                                                                            
